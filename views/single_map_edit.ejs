<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Viewing Map</title>
  <style>
    #map {
        height: 400px;
        width: 55%;
    }
  </style>
<!-- Requiring jQuery from host server -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<!-- <script type="text/javascript" src="scripts/create_map.js"></script> -->
</head>

<body>
  <h1><%= queryObj[0].map_title %></h1>
  <h3>Description: <%= queryObj[0].map_desc %></h3>
  <h3>Owner: <%= queryObj[0].owner %></h3>

<!-- Map -->
  <div id="map">
  </div>

  <!-- Point Form -->
  <!-- Point Form -->
  <form id="pointForm">
    <label for="pointTitle">Point Title</label><br>
    <input type="text" name="pointTitle" id="pointTitle"><br>
    <label for="pointDescription">Point Description</label><br>
    <input type="text" name="pointDescription" id="pointDescription"><br>
    <label for="point-image"">Point Image</label><br>
    <input type="text" placeholder="http://" name="point-image" id="point-image"><br>
    <label for="category">Choose a category:</label>
    <select name="category" id="category">
      <option value="Food">Food</option>
      <option value="Shopping">Shopping</option>
      <option value="Nature">Nature</option>
      <option value="Nightlife">Nightlife</option>
    </select>
    <button type='submit' class='pointButton'>Create Point</button>
  </form>

  <!-- This is where the individual marker coords are displayed and fetched for the generation of each markers array element -->
  <div id="marker_coords">
  </div>

  <!-- This is where all saved points are displayed -->
  <table id="pointsList">
  </table>

  <!-- Maps Edit (Leads to adding or deleting pins on the selected map) -->
  <form id='save-map'>
    <button type='submit'>SAVE MAP</button>
  </form>

  <!-- SCRIPTS -->
<script>

  let map;

  const visualMarkers = [];

  const queryData = <%- JSON.stringify(queryObj) %> //passes query object (templateVars) to <script> and allows us to use it in our JS. I DO NOT KNOW WHY THIS IS ERRORED, code works fine with nothing consoling with issues
  // console.log('qdata:',queryData)
  //Array of markers
  const markers = [];

  // code to take queryData from server and for loop to display markers


  // FAEZ CODE DELETE POINTS

  // sets all of the points back on the map
  function setMapOnAll(map) {
    for (let i = 0; i < visualMarkers.length; i++) {
      visualMarkers[i].setMap(map);
    }
  }

  function removeMarkers() {
    for(let i = 0; i < visualMarkers.length; i++){
      visualMarkers[i].setMap(null);
    }
  }


  // this generates the individual point elements within div tags (displayed in #pointsList)
  const generatePointsList = function(markers){
    console.log("generatePointsList", markers);

    let t = `<tr>
                <th >Title</th>
                <th>Description</th>
                <th>Lat</th>
                <th>Long</th>
                <th>Category</th>
                <th>Image</th>
                <th>Delete Point</th>
            </tr>`;
    for (let i = 0; i < markers.length; i++){
      if (!markers[i].pointImage) {
        markers[i].pointImage = 'https://i.pinimg.com/474x/b4/7b/96/b47b9623ba93546b9a2c412e1abe9306.jpg'; //if db or user does not have a image -> marker image is given a default
      }
      let tr = `<tr id = "${markers[i].pointTitle}">`;
      tr += "<td>"+markers[i].pointTitle+"</td>";
      tr += "<td>"+markers[i].pointDescription+"</td>";
      tr += "<td id = 'lat'>"+markers[i].coordinates.lat+"</td>";
      tr += "<td id = 'long'>"+markers[i].coordinates.lng+"</td>";
      tr += "<td>"+markers[i].category+"</td>";
      tr += `<td id='point-image'><a href='${markers[i].pointImage}' target='_blank'><img height=150px width=250px src='${markers[i].pointImage}'></a></td>`;
      tr += "<td>"+`<input type='button' value='Delete Point' class='removeItem'>`+"</td>";
      // tr += "<td>"+"<input type='button' value='Delete Row' onclick='deleteRowFunction()'>"+"</td>";
      // tr += "<td>"+"delete icon here"+"</td>";
      tr += "</tr>";
      t += tr;
    }
      document.getElementById("pointsList").innerHTML = t;
    };

  // simple reference to the pointsTable
    const pointsTable = document.getElementById('pointsList');

    // event listener for clicks onto any "delete point" button - removes the HTML element and marker from markers array (so it's not submitted to the DB when we save the map)
    pointsTable.addEventListener('click', (event) => {

      // if you click anywhere in the table aside from the removeItem button - it does nothing
      if (!event.target.classList.contains('removeItem')) {
        return;
      }

      // if you did click on the removeItem button - this determines the point title of the row we just deleted to also remove it from the markers table
      const deletedPointTitle = event.target.parentNode.parentNode.id;
      console.log("deletedPointTitle:", deletedPointTitle);

      // this counter keeps track of the marker index that we removed from the markers array
      let removedMarkerIndex = 0;

      // find the index of the marker from the markers array using the pointTitle - this index is then used to remove the marker from the markers list and to remove the visual marker - WARNING, each point title must be unique using this logic
      for (let i = 0; i < markers.length; i++) {
        if (markers[i].pointTitle === deletedPointTitle) {
          removedMarkerIndex = i;
          console.log('removed marker index:', removedMarkerIndex);
          // console.log(removedMarkerIndex);
        }
      }


      // saves the respect lat and lng for the removed marker from the markers array
      let markerLat = markers[removedMarkerIndex].coordinates.lat;
      let markerLng = markers[removedMarkerIndex].coordinates.lng;

      // console.log("markerLat:", parseFloat(markerLat).toFixed(4));
      // console.log("visualMarker Lat:", visualMarkers[0].position.lat().toFixed(4));
      // console.log("markerLng:", parseFloat(markerLng).toFixed(4));
      // console.log("visualMarker Lng:", visualMarkers[0].position.lng().toFixed(4));
      // console.log("visualMarkers array PRE-deletion:", visualMarkers);
      console.log('PRE VISUAL MARKERS')
      for (let elm of visualMarkers) {
        console.log(elm.position.lat(), elm.position.lng())
      }


      for (let j = 0; j < visualMarkers.length; j++) {
        // the marketLat and markerLng are not fixed length or integer types so the only way to have these equal the coords for the visualMarker is to convert to float then to fixed decimal places
        if (parseFloat(markerLat).toFixed(4) === visualMarkers[j].position.lat().toFixed(4) && parseFloat(markerLng).toFixed(4) === visualMarkers[j].position.lng().toFixed(4)) {
          removeMarkers();
          visualMarkers.splice(j, 1);
          console.log('POST VISUAL MARKERS')
          for (let elm of visualMarkers) {
            console.log(elm.position.lat(), elm.position.lng())
          }
          setMapOnAll(map);
        }
      }

      // this removes the marker (aka point) we deleted from the markers array
      markers.splice(removedMarkerIndex, 1);

      // I think* this is for the button's functionality but I haven't noticed it actually do anything yet
      event.preventDefault();

      // This re-sets the map with points

      // this deletes the actual HTML element from the DOM
      event.target.parentNode.parentNode.remove();

    });


    // Initializes the Google map based on currently hard-coded lat, long values
    function initMap() {
      //set up initial map for New Orleans as default
      const options = {  // Creates map options to add to the default map.
          zoom:8,
          center:{lat:51.0447,lng:-114.0719}
      }
      //let map = new google.maps.Map(document.getElementById('map'), options); //Creates the map and includes the options.
      map = new google.maps.Map(document.getElementById('map'), options); //Creates the map and includes the options.

      const iconSelector = (category) => {
        const iconOptions = {
          Food: "https://img.icons8.com/office/40/000000/hamburger.png",
          Shopping: "https://img.icons8.com/office/40/000000/mastercard-credit-card.png",
          Nature: "https://img.icons8.com/office/40/000000/forest.png",
          Nightlife: "https://img.icons8.com/office/40/000000/dancing.png"
        };
        const iconOptionKeys = Object.keys(iconOptions);

        for (const key of iconOptionKeys) {
          console.log("key:", key);
          console.log("category:", category);

          if (category === key) {
            console.log("they match!");
            return iconOptions[key];
          }
        }
      };

      for (let points of queryData) {
        // console.log(points)
        markers.push({coordinates: {lat: Number(points.latitude), lng: Number(points.longitude)}, pointTitle: points.title.toString(), pointDescription: points.description.toString(), category: points.category.toString(), content: points.title, pointImage: points.point_image});
      }

      //Listen for click on map
      google.maps.event.addListener(map, 'click', function(event){
          addMarker({coordinates:event.latLng, iconImage: iconSelector(document.getElementById("category").value)}); //Add marker
          // setMapOnAll(map);
          document.getElementById("marker_coords").innerHTML=event.latLng.toUrlValue();
          console.log(visualMarkers[0].position.lat());
          console.log(visualMarkers[0].position.lng());
      });


      // Listens for the submission of the pointForm button which then creates a markerElement containing coordinates (lat, lng), pointTitle, pointDescription
      document.getElementById("pointForm").addEventListener('submit',(event) => {
        event.preventDefault();
        //console.log("event", event);
        //console.log("pointTitle", document.getElementById("pointTitle").value);
        markers.push(
          {
            coordinates: {
              lat:document.getElementById("marker_coords").innerHTML.split(',')[0],
              lng:document.getElementById("marker_coords").innerHTML.split(',')[1]
            },
            pointTitle: document.getElementById("pointTitle").value,
            pointDescription: document.getElementById("pointDescription").value,
            category: document.getElementById("category").value,
            pointImage: document.getElementById("point-image").value
          }
        );
        // console.log(markers);
        generatePointsList(markers);
      });

      document.getElementById("save-map").addEventListener('submit', (event) => {
        event.preventDefault();

        $.ajax({
          url: '/api/maps/mapid/edit',
          method: "POST",
          data: {
            markers,
            mapId: queryData[0].map_id
            }
        })
        .then((result)=>{
          //does nothing
        })
        .catch((error)=>{
          console.log('error:',error);
        });
      });

      // Loop through markers
      for(let i = 0;i < markers.length;i++) {
          addMarker(markers[i]);
      }

      console.log('NEW NEW MARKERS:', visualMarkers)

      generatePointsList(markers);
      console.log('outside markers', markers);


      //Add Marker function
      function addMarker(props) {
        let marker;
        if (!props.iconImage) {
          const iconImage = iconSelector(props.category);

          marker = new google.maps.Marker({
              position:props.coordinates,
              map:map,
              icon:iconImage
          });

        } else {
          marker = new google.maps.Marker({
          position:props.coordinates,
          map:map,
          icon:props.iconImage
          });
        }

          // sends newly created marker into visualMarkers array with the coordinates
          visualMarkers.push(marker);
          console.log("just updated visualMarkers:", visualMarkers)

          // if(props.iconImage) {  //Check for custom icon
          //   marker.setIcon(props.iconImage); //Set icon image
          // }

          if(props.content) { //Check content
            let infoWindow = new google.maps.InfoWindow({
              content:props.content
            });

            marker.addListener('click', function() {
              infoWindow.open(map,marker);
            });
          }
      }
  }
</script>

  <script async defer
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDMNp3SzabTd8aZW6jzofga5kNv8K6sy9U&callback=initMap">
  </script>

</body>
</html>
