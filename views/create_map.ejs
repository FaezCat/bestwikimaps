<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

<!-- All Icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta2/css/all.min.css" integrity="sha512-YWzhKL2whUzgiheMoBFwW8CKV4qpHQAEuvilg9FAn5VJUDwKZZxkJNuGM4XkWuk94WCrrwslk8yWNGmY1EduTA==" crossorigin="anonymous" referrerpolicy="no-referrer"/>
<link rel="stylesheet" href="/styles/_header.css" type="text/css"/>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Abril+Fatface&family=Lato:ital,wght@0,300;0,400;1,900&display=swap" rel="stylesheet">
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Abril+Fatface&family=Lato:ital,wght@0,300;0,400;1,900&family=Oxygen:wght@700&display=swap" rel="stylesheet">

  <title>Document</title>
  <style>
    #map {
        height: 400px;
        width: 75%;
    }
  </style>
<!-- Requiring jQuery from host server -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<!-- <script type="text/javascript" src="scripts/create_map.js"></script> -->
<script type="text/javascript" src="/scripts/_header.js"></script>
</head>
<body>
<%- include('./_header'); %>
  <h1>Your New Map!</h1>
<!-- City Form -->
<form id="cityForm">
  <label for="cityName">City Name</label><br>
  <input type="text" name="cityName" id="cityName"><br>
  <label for="countryName">Country Name</label><br>
  <input type="text" name="countryName" id="countryName"><br>
  <button type='submit' class='cityCountryButton'>Show map!</button>
</form>

<!-- Map -->
  <div id="map">
  </div>

  <!-- Point Form -->
  <form id="pointForm">
    <label for="pointTitle">Point Title</label><br>
    <input type="text" name="pointTitle" id="pointTitle"><br>
    <label for="pointDescription">Point Description</label><br>
    <input type="text" name="pointDescription" id="pointDescription"><br>
    <label for="point-image">Point Image</label><br>
    <input type="text" placeholder="http://" name="point-image" id="point-image"><br>
    <label for="category">Choose a category:</label>
    <select name="category" id="category">
      <option value="Food">Food</option>
      <option value="Shopping">Shopping</option>
      <option value="Nature">Nature</option>
      <option value="Nightlife">Nightlife</option>
    </select>
    <button type='submit' class='pointButton'>Create Point</button>
  </form>

  <!-- This is where the individual marker coords are displayed and fetched for the generation of each markers array element -->
  <div id="marker_coords">
  </div>

  <!-- This is where all saved points are displayed -->
  <table id="pointsList">
  </table>

  <!-- Maps Form -->
  <form id="mapsForm">
    <label for="mapTitle">Map Title</label><br>
    <input type="text" name="mapTitle" id="mapTitle"><br>
    <label for="mapDescription">Map Description</label><br>
    <input type="text" name="mapDescription" id="mapDescription"><br>
    <button type='submit' class='pointButton'>Save Map</button>
  </form>

  <!-- SCRIPTS -->
<script>

  // initializes map variable which will store the map we set below - is needed so we can access the map in the remove point from pointsList event listener

  let map;

  // This array takes in all visualMarkers aka what is actually being displayed on the map
  let visualMarkers = [];

  //Array of marker data (this is what's later inserted into the points DB so it has to contain only what we want saved)
  const markers = [
    // Sample Marker Data
      // {
      //     coordinates:{lat:29.9841,lng:-90.1529},
      //     iconImage:'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png',
      //     pointTitle:'test1',
      //     pointDescription:'test1',
      //     category:'Food'
      // }
  ];

  // displays all visual markers on the map
  function setMapOnAll(map) {
        for (let i = 0; i < visualMarkers.length; i++) {
        visualMarkers[i].setMap(map);
        }
  }

  // hides all visual markers on the map
  function removeMarkers() {
    for(let i = 0; i < visualMarkers.length; i++){
        visualMarkers[i].setMap(null);
    }
  }

  // this generates the table which contains all point elements (these are then inserted and displayed in #pointsList)
  const generatePointsList = function(markers){

    let t = `<tr>
                <th >Title</th>
                <th>Description</th>
                <th>Lat</th>
                <th>Long</th>
                <th>Category</th>
                <th>Image</th>
                <th>Delete Point</th>
            </tr>`;
    for (let i = 0; i < markers.length; i++){
      if (!markers[i].pointImage) {
        markers[i].pointImage = 'https://i.pinimg.com/474x/b4/7b/96/b47b9623ba93546b9a2c412e1abe9306.jpg'; //if db or user does not have a image -> marker image is given a default
      }
      // ultra critical that this tr id does not change - it must remain as the pointTitle or various features will not work
      let tr = `<tr id = "${markers[i].pointTitle}">`;
      tr += "<td>"+markers[i].pointTitle+"</td>";
      tr += "<td>"+markers[i].pointDescription+"</td>";
      tr += "<td id = 'lat'>"+markers[i].coordinates.lat+"</td>";
      tr += "<td id = 'long'>"+markers[i].coordinates.lng+"</td>";
      tr += "<td>"+markers[i].category+"</td>";
      tr += `<td id='point-image'><a href='${markers[i].pointImage}' target='_blank'><img height=150px width=250px src='${markers[i].pointImage}'></a></td>`;
      tr += "<td>"+`<input type='button' value='Delete Point' class='removeItem'>`+"</td>";
      tr += "</tr>";
      t += tr;
    }
      document.getElementById("pointsList").innerHTML = t;
    };

    // simple to access reference to the pointsTable (shown above)
    const pointsTable = document.getElementById('pointsList');

    // event listener for clicks onto any "delete point" button in the pointTable - deletes visual HTML element, marker from markers, and visualMarker from map
    pointsTable.addEventListener('click', (event) => {

      // if you click anywhere in the table aside from the removeItem button - it does nothing
      if (!event.target.classList.contains('removeItem')) {
        return;
      }

      // if you did click on the removeItem button - this determines the point title of the row we just deleted to also remove it from the markers table
      const deletedPointTitle = event.target.parentNode.parentNode.id;
      // console.log("deletedPointTitle:", deletedPointTitle);

      // this counter keeps track of the marker index that we removed from the markers array
      let removedMarkerIndex = 0;

      // finds the index of the marker from the markers array using the pointTitle - this index is then used to remove the marker from the markers list and to remove the visual marker
      // WARNING, each point title must be unique using this logic
      for (let i = 0; i < markers.length; i++) {
        if (markers[i].pointTitle === deletedPointTitle) {
          removedMarkerIndex = i;
          // console.log(markers);
          // console.log(removedMarkerIndex);
        }
      }

      // saves the respective lat and lng for the removed marker from the markers array
      let markerLat = markers[removedMarkerIndex].coordinates.lat;
      let markerLng = markers[removedMarkerIndex].coordinates.lng;

      for (let j = 0; j < visualMarkers.length; j++) {
        // the marketLat and markerLng are not fixed length or integer types so the only way to have these equal the coords for the visualMarker is to convert to float then to fixed decimal places
        if (parseFloat(markerLat).toFixed(4) === visualMarkers[j].position.lat().toFixed(4) && parseFloat(markerLng).toFixed(4) === visualMarkers[j].position.lng().toFixed(4)) {
          removeMarkers();
          visualMarkers.splice(j, 1);
          setMapOnAll(map);
        }
      }

      // this removes the marker (aka point) we deleted from the markers array
      markers.splice(removedMarkerIndex, 1);

      // I think* this is for the button's functionality but I haven't noticed it actually do anything yet (scared to remove)
      event.preventDefault();

      // this deletes the actual HTML element from the DOM
      event.target.parentNode.parentNode.remove();

    });

    // Initializes the Google map based on currently hard-coded lat, long values
    function initMap() {

      const options = {  // Creates map options to add to the default map.
          zoom:8,
          center:{lat:51.0447,lng:-114.0719} // hard coded to center on Calgary currently
      }

      // sets the map variable to the new map
      map = new google.maps.Map(document.getElementById('map'), options); //Creates the map and includes the options

      // takes in a category (from various sources) and returns one of the URL's listed below which is fed to addMarker to set the icon image of each marker
      const iconSelector = (category) => {
        const iconOptions = {
          Food: "https://img.icons8.com/office/40/000000/hamburger.png",
          Shopping: "https://img.icons8.com/office/40/000000/mastercard-credit-card.png",
          Nature: "https://img.icons8.com/office/40/000000/forest.png",
          Nightlife: "https://img.icons8.com/office/40/000000/dancing.png"
        };
        const iconOptionKeys = Object.keys(iconOptions);

        for (const key of iconOptionKeys) {

          if (category === key) {
            return iconOptions[key];
          }
        }
      };

      //renders map of user inputted location (for now, Vancouver or Calgary only)
      document.getElementById("cityForm").addEventListener('submit', () => {
        event.preventDefault();
        let cityName = document.getElementById("cityName").value;
        //console.log("cityName",cityName);
        if (cityName === "Vancouver") {
          map.setCenter({
            lat: 49.2827,
            lng: -123.1207
          });
        }
        if (cityName === "Calgary") {
          map.setCenter({
            lat: 51.0447,
            lng: -114.0719
          });
        }
      });

      //Listens for clicks on the map and then creates a marker followed by displaying the lat and lng of that marker in the "marker_coords" ID element (to be used elsewhere)
      google.maps.event.addListener(map, 'click', function(event){

        addMarker({coordinates:event.latLng, iconImage: iconSelector(document.getElementById("category").value)}); //Add marker

          document.getElementById("marker_coords").innerHTML=event.latLng.toUrlValue();
          // console.log(visualMarkers[0].position.lat());
          // console.log(visualMarkers[0].position.lng());
        });

      // Listens for the submission of the pointForm button which then creates a marker element containing coordinates (lat, lng), pointTitle, pointDescription, category, and pointImage
      document.getElementById("pointForm").addEventListener('submit',(event) => {
        event.preventDefault();

          markers.push(
            {
              coordinates: {
                lat:document.getElementById("marker_coords").innerHTML.split(',')[0],
                lng:document.getElementById("marker_coords").innerHTML.split(',')[1]
              },
              pointTitle: document.getElementById("pointTitle").value,
              pointDescription: document.getElementById("pointDescription").value,
              category: document.getElementById("category").value,
              pointImage: document.getElementById("point-image").value
            }
          );
        generatePointsList(markers);
      });

      document.getElementById("mapsForm").addEventListener('submit', (event) => {
        event.preventDefault();

        // upon hitting save map this submits the data for the map and markers (points) to then be inserted into the DB
        $.ajax({
          url: '/api/maps/create',
          method: "POST",
          data: {
            markers,
            mapTitle: document.getElementById("mapTitle").value,
            mapDescription: document.getElementById("mapDescription").value
            }
        })
        .then((result)=>{
          window.location.href = "/api/maps/" + result.mapID; //this changes the browser location (url location). AJAX + Routing is messy. an ajax call doesent allow you to redirect you have to send over data with the ajax. AJAX needs to send json
        })
        .catch((error)=>{
          // console.log('error:',error);
        });
      });

      function addMarker(props) {

        const marker = new google.maps.Marker({
          position:props.coordinates,
          map:map,
          icon: props.iconImage,
        });

        // sends newly created marker into visualMarkers array
        visualMarkers.push(marker);


        // this function prevents multiple unsaved markers from showing on the map
        function visualMarkerLimiter() {

          // if the visualmarkers and markers lengths differ by more than one and markers is empty then it will simply delete the first visual marker and display the last
          if (visualMarkers.length - markers.length > 1 && markers.length === 0) {
            // console.log("This is showing because the markers.length is 0");
            removeMarkers();
            visualMarkers.splice(0, 1);
            setMapOnAll(map);
          }

          // this contains the validated visual markers (populated by the for loops below) which will then be pushed to markers
          const validatedVisualMarkers = [];

          if (visualMarkers.length - markers.length > 1 && markers.length >= 1) {
            for (let j = 0; j < visualMarkers.length; j++) {
              for (let i = 0; i < markers.length; i++) {
                // for ease of validating that the marker and visualmarker lats and lngs are matching
                // console.log("visualMarker lat:", visualMarkers[j].position.lat().toFixed(4));
                // console.log("markers lat:", parseFloat(markers[i].coordinates.lat).toFixed(4));
                // console.log("visualMarker lng:", visualMarkers[j].position.lng().toFixed(4));
                // console.log("markers lng:", parseFloat(markers[i].coordinates.lng).toFixed(4));

                if (visualMarkers[j].position.lat().toFixed(4) === parseFloat(markers[i].coordinates.lat).toFixed(4) && visualMarkers[j].position.lng().toFixed(4) === parseFloat(markers[i].coordinates.lng).toFixed(4)) {
                  console.log("They matched!");
                  validatedVisualMarkers.push(visualMarkers[j]);
                }
              }
            }
            removeMarkers();
            // HUGE NOTE HERE - READ THIS - SET visualMarkers to a let variable instead of a const or this will fail
            visualMarkers = validatedVisualMarkers;
            setMapOnAll(map);
          }
        };
        visualMarkerLimiter();
      }
    }
</script>

  <script async defer
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDMNp3SzabTd8aZW6jzofga5kNv8K6sy9U&callback=initMap">
  </script>

</body>
</html>
